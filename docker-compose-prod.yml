version: "3.9"
services:
  cron:
    image: crazymax/swarm-cronjob:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      LOG_LEVEL: info
    deploy:
      placement:
        constraints: [ node.role == manager ]

  traefik:
    image: traefik:2.8
    command:
      --providers.docker=true
      --providers.docker.watch=true
      --providers.docker.swarmMode=true
      --providers.docker.exposedByDefault=false
      --entryPoints.http.address=:80
      --entryPoints.https.address=:443
      --certificatesResolvers.letsEncrypt.acme.httpChallenge=true
      --certificatesResolvers.letsEncrypt.acme.httpChallenge.entryPoint=http
      --certificatesResolvers.letsEncrypt.acme.email=dev@arip.info
      --certificatesResolvers.letsEncrypt.acme.storage=/certs/acme.json
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
    networks:
      - traefik-public
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-certs:/certs
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)
        - traefik.http.routers.http-catchall.entryPoints=http
        - traefik.http.routers.http-catchall.middlewares=redirect-to-https
        - traefik.http.services.http-catchall.loadBalancer.server.port=80
        - traefik.http.middlewares.redirect-to-https.redirectScheme.scheme=https
        - traefik.http.middlewares.redirect-to-https.redirectScheme.permanent=true
        - traefik.http.middlewares.secure-headers.headers.sslRedirect=true
        - traefik.http.middlewares.secure-headers.headers.stsSeconds=31536000
        - traefik.http.middlewares.secure-headers.headers.contentSecurityPolicy=block-all-mixed-content
      placement:
        constraints: [ node.role == manager ]

  client:
    image: ${REGISTRY}/pharm-client:${IMAGE_TAG}
    networks:
      - traefik-public
      - default
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.http.routers.site.rule=Host(`xn--12080-6ve4g.xn--p1ai`) || Host(`www.xn--12080-6ve4g.xn--p1ai`) || Host(`120-na-80.ru`) || Host(`www.120-na-80.ru`)
        - traefik.http.services.site.loadBalancer.server.port=80
        - traefik.http.middlewares.site-redirect.redirectRegex.regex=^(https?://)(www.xn--12080-6ve4g.xn--p1ai|www.120-na-80.ru|120-na-80.ru)/(.*)$$
        - traefik.http.middlewares.site-redirect.redirectRegex.replacement=$${1}xn--12080-6ve4g.xn--p1ai/$${3}
        - traefik.http.middlewares.site-redirect.redirectRegex.permanent=true
        - traefik.http.routers.site.middlewares=site-redirect,secure-headers
        - traefik.http.routers.site.entryPoints=https
        - traefik.http.routers.site.tls=true
        - traefik.http.routers.site.tls.certResolver=letsEncrypt
      mode: replicated
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s

  client-node:
    image: ${REGISTRY}/pharm-client-node:${IMAGE_TAG}
    deploy:
      mode: replicated
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s

  panel:
    image: ${REGISTRY}/pharm-panel:${IMAGE_TAG}
    networks:
      - traefik-public
      - default
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.http.routers.panel.rule=Host(`panel.xn--12080-6ve4g.xn--p1ai`)
        - traefik.http.services.panel.loadBalancer.server.port=80
        - traefik.http.routers.panel.middlewares=secure-headers
        - traefik.http.routers.panel.entryPoints=https
        - traefik.http.routers.panel.tls=true
        - traefik.http.routers.panel.tls.certResolver=letsEncrypt
      mode: replicated
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s

  api:
    image: ${REGISTRY}/pharm-api:${IMAGE_TAG}
    networks:
      - traefik-public
      - default
    volumes:
      - uploads:/app/public/storage
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.http.routers.api.rule=Host(`api.xn--12080-6ve4g.xn--p1ai`)
        - traefik.http.services.api.loadBalancer.server.port=80
        - traefik.http.routers.api.middlewares=secure-headers
        - traefik.http.routers.api.entryPoints=https
        - traefik.http.routers.api.tls=true
        - traefik.http.routers.api.tls.certResolver=letsEncrypt
      mode: replicated
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s

  api-php-fpm:
    image: ${REGISTRY}/pharm-api-php-fpm:${IMAGE_TAG}
    environment:
      APP_NAME: Сеть аптек 120/80
      APP_URL: https://api.120на80.рф
      LOG_CHANNEL: stderr
      DB_CONNECTION: pgsql
      DB_HOST: api-db
      DB_DATABASE: app
      DB_USERNAME: app
      DB_PASSWORD: ${DB_PASSWORD}
      FILESYSTEM_DISK: public
      CACHE_DRIVER: redis
      QUEUE_CONNECTION: redis
      SESSION_DRIVER: redis
      SESSION_CONNECTION: cache
      SESSION_SECURE_COOKIE: 'true'
      SESSION_DOMAIN: '.xn--12080-6ve4g.xn--p1ai'
      CORS_ORIGIN: 'https://panel.xn--12080-6ve4g.xn--p1ai|https://xn--12080-6ve4g.xn--p1ai'
      REDIS_HOST: redis
      MAIL_HOST: smtp.mail.ru
      MAIL_PORT: 465
      MAIL_USERNAME: info@120-na-80.ru
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      MAIL_FROM_ADDRESS: info@120-na-80.ru
      MAIL_FROM_NAME: Сеть аптек 120/80
      IPINFO_TOKEN: ${IPINFO_TOKEN}
      # ELASTICSEARCH_HOST: elasticsearch
    volumes:
      - uploads:/app/storage/app/public
    deploy:
      mode: replicated
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s

  api-migration:
    image: ${REGISTRY}/pharm-api-php-cli:${IMAGE_TAG}
    environment:
      DB_CONNECTION: pgsql
      DB_HOST: api-db
      DB_DATABASE: app
      DB_USERNAME: app
      DB_PASSWORD: ${DB_PASSWORD}
    command: sh -c 'wait-for-it api-db:5432 -t 60 && php artisan migrate --force'
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 120s

  api-db:
    image: postgres:14.1-alpine
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: app
    volumes:
      - api-db:/var/lib/postgresql/data
    ports:
      - target: 5432
        published: 5432
        protocol: tcp
        mode: host
    deploy:
      placement:
        constraints: [ node.role == manager ]
      endpoint_mode: dnsrr

  # db-backup:
  #   image: ${REGISTRY}/pharm-db-backup:${IMAGE_TAG}
  #   environment:
  #     BACKUP_NAME: pharm-postgres
  #     POSTGRES_HOST: api-db
  #     POSTGRES_USERNAME: app
  #     POSTGRES_PASSWORD: ${DB_PASSWORD}
  #     POSTGRES_DB: app
  #     AWS_ACCESS_KEY_ID: storage_app
  #     AWS_SECRET_ACCESS_KEY: storage_secret
  #     AWS_DEFAULT_REGION: region
  #     S3_ENDPOINT: http://backup-storage:9000
  #     S3_BUCKET: backup
  #   command: sh -c 'wait-for-it api-db:5432 -t 60 && backup'
  #   deploy:
  #     labels:
  #       - swarm.cronjob.enable=true
  #       - swarm.cronjob.schedule=0 * * * *
  #       - swarm.cronjob.skip-running=true
  #     replicas: 0
  #     restart_policy:
  #       condition: none

  api-scheduler:
    image: ${REGISTRY}/pharm-api-php-cli:${IMAGE_TAG}
    environment:
      APP_NAME: Сеть аптек 120/80
      APP_URL: https://api.120на80.рф
      LOG_CHANNEL: stderr
      DB_CONNECTION: pgsql
      DB_HOST: api-db
      DB_DATABASE: app
      DB_USERNAME: app
      DB_PASSWORD: ${DB_PASSWORD}
      FILESYSTEM_DRIVER: public
      CACHE_DRIVER: redis
      QUEUE_CONNECTION: redis
      REDIS_HOST: redis
    command: sh -c 'php artisan schedule:run'
    volumes:
      - uploads:/app/storage/app/public
    deploy:
      labels:
        - swarm.cronjob.enable=true
        - swarm.cronjob.schedule=* * * * *
        - swarm.cronjob.skip-running=true
      replicas: 0
      restart_policy:
        condition: none

  api-worker:
    image: ${REGISTRY}/pharm-api-php-cli:${IMAGE_TAG}
    environment:
      APP_NAME: Сеть аптек 120/80
      APP_URL: https://api.120на80.рф
      LOG_CHANNEL: stderr
      DB_CONNECTION: pgsql
      DB_HOST: api-db
      DB_DATABASE: app
      DB_USERNAME: app
      DB_PASSWORD: ${DB_PASSWORD}
      FILESYSTEM_DRIVER: public
      CACHE_DRIVER: redis
      QUEUE_CONNECTION: redis
      REDIS_HOST: redis
      MAIL_HOST: smtp.mail.ru
      MAIL_PORT: 465
      MAIL_USERNAME: info@120-na-80.ru
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      MAIL_FROM_ADDRESS: info@120-na-80.ru
      MAIL_FROM_NAME: Сеть аптек 120/80
    command: sh -c 'wait-for-it redis:6379 -t 60 && php artisan queue:work'
    volumes:
      - uploads:/app/storage/app/public
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 120s

  api-subscribe:
    image: ${REGISTRY}/pharm-api-php-cli:${IMAGE_TAG}
    environment:
      APP_NAME: Сеть аптек 120/80
      APP_URL: https://api.120на80.рф
      LOG_CHANNEL: stderr
      DB_CONNECTION: pgsql
      DB_HOST: api-db
      DB_DATABASE: app
      DB_USERNAME: app
      DB_PASSWORD: ${DB_PASSWORD}
      FILESYSTEM_DRIVER: public
      CACHE_DRIVER: redis
      QUEUE_CONNECTION: redis
      REDIS_HOST: redis
      MAIL_HOST: smtp.mail.ru
      MAIL_PORT: 465
      MAIL_USERNAME: info@120-na-80.ru
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      MAIL_FROM_ADDRESS: info@120-na-80.ru
      MAIL_FROM_NAME: Сеть аптек 120/80
    command: sh -c 'wait-for-it redis:6379 -t 60 && php artisan redis:subscribe'
    volumes:
      - uploads:/app/storage/app/public
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 120s

  # parser:
  #   image: ${REGISTRY}/pharm-parser:${IMAGE_TAG}
  #   environment:
  #     APP_NAME: Сеть аптек 120/80
  #   command: sh -c 'python main.py'
  #   deploy:
  #     labels:
  #       - swarm.cronjob.enable=true
  #       - swarm.cronjob.schedule=0 2 * * *
  #       - swarm.cronjob.skip-running=true
  #     replicas: 0
  #     restart_policy:
  #       condition: none

  bot:
    image: ${REGISTRY}/pharm-bot:${IMAGE_TAG}
    environment:
      APP_NAME: Сеть аптек 120/80
      REDIS_HOST: redis
    command: sh -c 'wait-for-it redis:6379 -t 60 && python main.py'
    deploy:
      mode: replicated
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s

  # elasticsearch:
  #   image: elasticsearch:8.3.2
  #   environment:
  #     - node.name=elasticsearch
  #     - cluster.name=oms-logs.qa
  #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  #     - discovery.seed_hosts=elasticsearch
  #     - cluster.initial_master_nodes=elasticsearch
  #     - xpack.ml.enabled=false
  #     - xpack.monitoring.templates.enabled=false
  #     - xpack.security.enabled=false
  #     - xpack.watcher.enabled=false
  #     - bootstrap.memory_lock=false
  #   volumes:
  #     - es-data:/usr/share/elasticsearch/data
  #   deploy:
  #     mode: global
  #     endpoint_mode: dnsrr
  #     resources:
  #       limits:
  #         memory: 4G

  redis:
    image: redis:6.2-alpine
    deploy:
      placement:
        constraints: [ node.role == manager ]
      endpoint_mode: dnsrr

volumes:
  api-db:
  uploads:
  traefik-certs:
  es-data:

networks:
  traefik-public:
    external: true
