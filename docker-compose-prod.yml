version: "3.9"
services:
  cron:
    image: crazymax/swarm-cronjob:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      LOG_LEVEL: info
    deploy:
      placement:
        constraints: [ node.role == manager ]

  traefik:
    image: traefik:2.7
    command: --providers.docker=true --providers.docker.watch=true --providers.docker.swarmMode=true --providers.docker.exposedByDefault=false --entryPoints.http.address=:80 --entryPoints.https.address=:443 --certificatesResolvers.letsEncrypt.acme.httpChallenge=true --certificatesResolvers.letsEncrypt.acme.httpChallenge.entryPoint=http --certificatesResolvers.letsEncrypt.acme.email=dev@arip.info --certificatesResolvers.letsEncrypt.acme.storage=/certs/acme.json
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
    networks:
      - traefik-public
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-public-certs:/certs
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)
        - traefik.http.routers.http-catchall.entryPoints=http
        - traefik.http.routers.http-catchall.middlewares=redirect-to-https
        - traefik.http.services.http-catchall.loadBalancer.server.port=80
        - traefik.http.middlewares.redirect-to-https.redirectScheme.scheme=https
        - traefik.http.middlewares.redirect-to-https.redirectScheme.permanent=true
        - traefik.http.middlewares.secure-headers.headers.sslRedirect=true
        - traefik.http.middlewares.secure-headers.headers.stsSeconds=31536000
        - traefik.http.middlewares.secure-headers.headers.contentSecurityPolicy=block-all-mixed-content
      placement:
        constraints: [ node.role == manager ]

  panel:
    image: ${REGISTRY}/pharm-panel:${IMAGE_TAG}
    networks:
      - traefik-public
      - default
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.http.routers.panel.rule=Host(`panel.xn--05-6kcay4a7ay.xn--p1ai`)
        - traefik.http.services.panel.loadBalancer.server.port=80
        - traefik.http.routers.panel.middlewares=secure-headers
        - traefik.http.routers.panel.entryPoints=https
        - traefik.http.routers.panel.tls=true
        - traefik.http.routers.panel.tls.certResolver=letsEncrypt
      mode: replicated
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s

  site:
    image: ${REGISTRY}/pharm-site:${IMAGE_TAG}
    networks:
      - traefik-public
      - default
    volumes:
      - uploads:/app/storage/app/public
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.http.routers.site.rule=Host(`xn--05-6kcay4a7ay.xn--p1ai`) || Host(`www.xn--05-6kcay4a7ay.xn--p1ai`)
        - traefik.http.services.site.loadBalancer.server.port=80
        - traefik.http.middlewares.site-redirect.redirectRegex.regex=^(https?://)www.xn--05-6kcay4a7ay.xn--p1ai/(.*)$$
        - traefik.http.middlewares.site-redirect.redirectRegex.replacement=$${1}xn--05-6kcay4a7ay.xn--p1ai/$${2}
        - traefik.http.middlewares.site-redirect.redirectRegex.permanent=true
        - traefik.http.routers.site.middlewares=site-redirect,secure-headers
        - traefik.http.routers.site.entryPoints=https
        - traefik.http.routers.site.tls=true
        - traefik.http.routers.site.tls.certResolver=letsEncrypt
      mode: replicated
      replicas: 1
      update_config:
        parallelism: 1
        delay: 5s

  site-php-fpm:
    image: ${REGISTRY}/pharm-site-php-fpm:${IMAGE_TAG}
    environment:
      APP_NAME: Сеть аптек 120/80
      APP_URL: https://аптека05.рф
      LOG_CHANNEL: stack
      LOG_LEVEL: debug
      DB_CONNECTION: pgsql
      DB_HOST: db-postgres
      DB_DATABASE: app
      DB_USERNAME: app
      DB_PASSWORD: ${DB_PASSWORD}
      FILESYSTEM_DRIVER: public
      BROADCAST_DRIVER: redis
      CACHE_DRIVER: redis
      QUEUE_CONNECTION: redis
      SESSION_DRIVER: redis
      SESSION_LIFETIME: 120
      SESSION_DOMAIN: '.xn--05-6kcay4a7ay.xn--p1ai'
      SANCTUM_STATEFUL_DOMAINS: '*.xn--05-6kcay4a7ay.xn--p1ai'
      CORS_ORIGIN: https://panel.xn--05-6kcay4a7ay.xn--p1ai
      REDIS_HOST: redis
      REDIS_CLIENT: predis
      MAIL_HOST: smtp.yandex.ru
      MAIL_PORT: 465
      MAIL_USERNAME: info@120на80.рф
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      MAIL_FROM_ADDRESS: info@120на80.рф
      MAIL_FROM_NAME: Сеть аптек 120/80
    volumes:
      - uploads:/app/storage/app/public
      - ./logs:/app/storage/logs
    deploy:
      mode: replicated
      replicas: 1
      update_config:
        parallelism: 1
        delay: 5s

  site-migration:
    image: ${REGISTRY}/pharm-site-php-cli:${IMAGE_TAG}
    environment:
      DB_CONNECTION: pgsql
      DB_HOST: db-postgres
      DB_DATABASE: app
      DB_USERNAME: app
      DB_PASSWORD: ${DB_PASSWORD}
    command: sh -c 'wait-for-it db-postgres:5432 -t 60 && php artisan migrate --force'
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 120s

  db-postgres:
    image: postgres:14.1-alpine
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: app
    volumes:
      - db-postgres:/var/lib/postgresql/data
    ports:
      - target: 5432
        published: 5432
        protocol: tcp
        mode: host
    deploy:
      placement:
        constraints: [ node.role == manager ]
      endpoint_mode: dnsrr

  # db-backup:
  #   image: ${REGISTRY}/pharm-db-backup:${IMAGE_TAG}
  #   environment:
  #     BACKUP_NAME: pharm-postgres
  #     POSTGRES_HOST: db-postgres
  #     POSTGRES_USERNAME: app
  #     POSTGRES_PASSWORD: ${DB_PASSWORD}
  #     POSTGRES_DB: app
  #     AWS_ACCESS_KEY_ID: storage_app
  #     AWS_SECRET_ACCESS_KEY: storage_secret
  #     AWS_DEFAULT_REGION: region
  #     S3_ENDPOINT: http://backup-storage:9000
  #     S3_BUCKET: backup
  #   command: sh -c 'wait-for-it db-postgres:5432 -t 60 && backup'
  #   deploy:
  #     labels:
  #       - swarm.cronjob.enable=true
  #       - swarm.cronjob.schedule=0 * * * *
  #       - swarm.cronjob.skip-running=true
  #     replicas: 0
  #     restart_policy:
  #       condition: none

  # cheduler:
  #   image: ${REGISTRY}/pharm-site-php-cli:${IMAGE_TAG}
  #   environment:
  #     APP_NAME: Сеть аптек 120/80
  #     APP_URL: https://аптека05.рф
  #     LOG_CHANNEL: stack
  #     LOG_LEVEL: debug
  #     DB_CONNECTION: pgsql
  #     DB_HOST: db-postgres
  #     DB_DATABASE: app
  #     DB_USERNAME: app
  #     DB_PASSWORD: ${DB_PASSWORD}
  #     FILESYSTEM_DRIVER: public
  #     BROADCAST_DRIVER: redis
  #     CACHE_DRIVER: redis
  #     QUEUE_CONNECTION: redis
  #     REDIS_HOST: redis
  #     REDIS_CLIENT: predis
  #     MAIL_HOST: smtp.yandex.ru
  #     MAIL_PORT: 465
  #     MAIL_USERNAME: info@120на80.рф
  #     MAIL_PASSWORD: ${MAIL_PASSWORD}
  #     MAIL_FROM_ADDRESS: info@120на80.рф
  #     MAIL_FROM_NAME: Сеть аптек 120/80
  #   command: sh -c 'php artisan schedule:run'
  #   deploy:
  #     labels:
  #       - swarm.cronjob.enable=true
  #       - swarm.cronjob.schedule=* * * * *
  #       - swarm.cronjob.skip-running=true
  #     replicas: 0
  #     restart_policy:
  #       condition: none

  site-redis-queue:
    image: ${REGISTRY}/pharm-site-php-cli:${IMAGE_TAG}
    environment:
      APP_NAME: Сеть аптек 120/80
      APP_URL: https://аптека05.рф
      LOG_CHANNEL: stack
      LOG_LEVEL: debug
      DB_CONNECTION: pgsql
      DB_HOST: db-postgres
      DB_DATABASE: app
      DB_USERNAME: app
      DB_PASSWORD: ${DB_PASSWORD}
      FILESYSTEM_DRIVER: public
      BROADCAST_DRIVER: redis
      CACHE_DRIVER: redis
      QUEUE_CONNECTION: redis
      REDIS_HOST: redis
      REDIS_CLIENT: predis
      MAIL_HOST: smtp.yandex.ru
      MAIL_PORT: 465
      MAIL_USERNAME: info@120на80.рф
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      MAIL_FROM_ADDRESS: info@120на80.рф
      MAIL_FROM_NAME: Сеть аптек 120/80
    command: sh -c 'wait-for-it redis:6379 -t 60 && php artisan redis:subscribe'
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 120s

  bot:
    image: ${REGISTRY}/pharm-bot:${IMAGE_TAG}
    environment:
      APP_NAME: Сеть аптек 120/80
      REDIS_HOST: redis
    depends_on:
      - redis
    deploy:
      mode: replicated
      replicas: 1
      update_config:
        parallelism: 1
        delay: 5s

  redis:
    image: redis:6.2-alpine
    deploy:
      placement:
        constraints: [ node.role == manager ]

volumes:
  db-postgres:
  uploads:
  traefik-public-certs:


networks:
  traefik-public:
    name: traefik-public
