version: "3.9"
services:
  traefik:
    image: traefik:2.6
    command:
      --providers.docker=true
      --providers.docker.exposedByDefault=false
      --providers.docker.swarmmode
      --entryPoints.http.address=:80
    ports:
      - "80:80"
    networks:
      - traefik-public
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
    deploy:
      placement:
        constraints: [ node.role == manager ]
  
  cron:
    image: crazymax/swarm-cronjob:latest
    environment:
      LOG_LEVEL: info
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      placement:
        constraints: [ node.role == manager ]

  panel:
    image: ${REGISTRY}/pharm-panel:${IMAGE_TAG}
    networks:
      - traefik-public
      - default
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.http.routers.api.rule=Host(`panel.xn--05-6kcay4a7ay.xn--p1ai`)
        - traefik.http.routers.api.entryPoints=http
        - traefik.http.services.api.loadBalancer.server.port=80
      mode: replicated
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s

  site:
    image: ${REGISTRY}/pharm-site:${IMAGE_TAG}
    networks:
      - traefik-public
      - default
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.http.routers.frontend.rule=Host(`xn--05-6kcay4a7ay.xn--p1ai`) || Host(`www.xn--05-6kcay4a7ay.xn--p1ai`)
        - traefik.http.routers.frontend.entryPoints=http
        - traefik.http.services.frontend.loadBalancer.server.port=80
        - traefik.http.middlewares.frontend-redirect.redirectRegex.regex=^(https?://)www.xn--05-6kcay4a7ay.xn--p1ai/(.*)$$
        - traefik.http.middlewares.frontend-redirect.redirectRegex.replacement=$${1}xn--05-6kcay4a7ay.xn--p1ai/$${2}
        - traefik.http.middlewares.frontend-redirect.redirectRegex.permanent=true
        - traefik.http.routers.frontend.middlewares=frontend-redirect
      mode: replicated
      replicas: 1
      update_config:
        parallelism: 1
        delay: 5s

  site-php-fpm:
    image: ${REGISTRY}/pharm-site-php-fpm:${IMAGE_TAG}
    environment:
      APP_NAME: Сеть аптек 120/80
      APP_URL: https://аптека05.рф
      LOG_CHANNEL: stack
      LOG_LEVEL: debug
      DB_CONNECTION: pgsql
      DB_HOST: db-postgres
      DB_DATABASE: app
      DB_USERNAME: app
      DB_PASSWORD: ${DB_PASSWORD}
      BROADCAST_DRIVER: redis
      CACHE_DRIVER: redis
      QUEUE_CONNECTION: redis
      SESSION_DRIVER: redis
      SESSION_LIFETIME: 120
      SESSION_DOMAIN: '.аптека05.рф'
      SANCTUM_STATEFUL_DOMAINS: '*.аптека05.рф'
      REDIS_HOST: redis
      REDIS_CLIENT: predis
      MAIL_HOST: smtp.yandex.ru
      MAIL_PORT: 465
      MAIL_USERNAME: info@120на80.рф
      MAIL_PASSWORD: info12345
      MAIL_FROM_ADDRESS: info@120на80.рф
      MAIL_FROM_NAME: ${APP_NAME}
    volumes:
      - uploads:/app/storage/app/public
    deploy:
      mode: replicated
      replicas: 1
      update_config:
        parallelism: 1
        delay: 5s

  site-migration:
    image: ${REGISTRY}/pharm-site-php-cli:${IMAGE_TAG}
    environment:
      APP_NAME: Сеть аптек 120/80
      APP_URL: https://аптека05.рф
      LOG_CHANNEL: stack
      LOG_LEVEL: debug
      DB_CONNECTION: pgsql
      DB_HOST: db-postgres
      DB_DATABASE: app
      DB_USERNAME: app
      DB_PASSWORD: ${DB_PASSWORD}
      BROADCAST_DRIVER: redis
      CACHE_DRIVER: redis
      QUEUE_CONNECTION: redis
      SESSION_DRIVER: redis
      SESSION_LIFETIME: 120
      SESSION_DOMAIN: '.аптека05.рф'
      SANCTUM_STATEFUL_DOMAINS: '*.аптека05.рф'
      REDIS_HOST: redis
      REDIS_CLIENT: predis
      MAIL_HOST: smtp.yandex.ru
      MAIL_PORT: 465
      MAIL_USERNAME: info@120на80.рф
      MAIL_PASSWORD: info12345
      MAIL_FROM_ADDRESS: info@120на80.рф
      MAIL_FROM_NAME: ${APP_NAME}
    command: sh -c 'wait-for-it db-postgres:5432 -t 60 && php artisan migrate --force'
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 120s

  db-postgres:
    image: postgres:14.1-alpine
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: app
    volumes:
      - db-postgres:/var/lib/postgresql/data
    deploy:
      placement:
        constraints: [ node.role == manager ]
      endpoint_mode: dnsrr

  db-backup:
    image: ${REGISTRY}/pharm-db-backup:${IMAGE_TAG}
    environment:
      BACKUP_NAME: pharm-postgres
      POSTGRES_HOST: db-postgres
      POSTGRES_USERNAME: app
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: app
      AWS_ACCESS_KEY_ID: storage_app
      AWS_SECRET_ACCESS_KEY: storage_secret
      AWS_DEFAULT_REGION: region
      S3_ENDPOINT: http://backup-storage:9000
      S3_BUCKET: backup
    command: sh -c 'wait-for-it db-postgres:5432 -t 60 && backup'
    deploy:
      labels:
        - swarm.cronjob.enable=true
        - swarm.cronjob.schedule=0 * * * *
        - swarm.cronjob.skip-running=true
      replicas: 0
      restart_policy:
        condition: none
  
  redis:
    image: redis:6.2-alpine
    deploy:
      placement:
        constraints: [ node.role == manager ]

volumes:
  db-postgres:
  uploads:

networks:
  traefik-public:
    external: true
